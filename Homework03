-- Question 1
-- Write a function that checks if the monthly consumption of an electrical device is bigger, equal, or smaller than the maximum allowed and
-- returns a message accordingly. 
-- The function has to take the hourly consumption of an electrical device, the hours of daily use, and the maximum monthly consumption allowed.
-- (Monthly usage = consumption (kW) * hours of daily use (h) * 30 days).

checkFunction:: Float -> Float -> String 
checkFunction consumption hours 
  | monthly > allowed = "The monthly consumption of an electrical device is bigger than the maximum allowed"
  | monthly < allowed = "The monthly consumption of an electrical device is smaller than the maximum allowed"
  | otherwise = "The monthly consumption of an electrical device is equal the maximum allowed"
  where 
  monthly =  consumption * hours * 30
  allowed = 100


-- Question 2
-- Prelude:
-- We use the function `show :: a -> String` to transform any type into a String.
-- So `show 3` will produce `"3"` and `show (3 > 2)` will produce `"True"`.

-- In the previous function, return the excess/savings of consumption as part of the message.

checkFunction1:: Float -> Float -> String 
checkFunction1 consumption hours
  | monthly > allowed = "The monthly consumption of an electrical device is bigger than the maximum allowed is "++ show(monthly - allowed) 
  | monthly < allowed = "The monthly consumption of an electrical device is smaller than the maximum allowed" ++ show(allowed - monthly)
  | otherwise = "The monthly consumption of an electrical device is equal the maximum allowed"
  where 
  monthly =  consumption * hours * 30
  allowed = 1000


-- Question 3
-- Write a function that showcases the advantages of using let expressions to split a big expression into smaller ones.
-- Then, share it with other students in Canvas.

-- `let` expressions are convenient whenever we want to split complex expressions into smaller building blocks that you combine into a final expression.


dienTichHinhTru :: Double -> Double -> Double
dienTichHinhTru r h = let dientichXq = 2*pi*r*h
                          dientich2day = 2*pi*r**2
                      in dientichXq + dientich2day

-- Question 4
-- Write a function that takes in two numbers and returns their quotient such that it is not greater than 1.
-- Return the number as a string, and in case the divisor is 0, return a message why the division is not
-- possible. To implement this function using both guards and if-then-else statements.  



-- Using guards
divNumber :: Double -> Double -> String
divNumber a b 
  |  a<b  = "a/b = " ++ show (a/b)     
  | b == 0 = "Error Syntax"
  | otherwise = "a>b"

-- Using if-else-then

divNumber1 :: Double -> Double -> String
divNumber1 a b = if b == 0
                  then "Error Syntax"
                    else
                      if a < b
                        then "a/b = " ++ show(a/b)
                          else "a > b"
                    

  

-- Question 5
-- Write a function that takes in two numbers and calculates the sum of squares for the product and quotient
-- of those numbers. Write the function such that you use a where block inside a let expression and a
-- let expression inside a where block.

-- Using where
{-  sumOfNumber :: Double -> Double -> String
  sumOfNumber a b = if b != 0
                      then "Sum of squares for the product and quotient: " ++ show((mulNumber + divNumber)**2) 
                        else "Error Syntax"
          where mulNumber = a*b
                divNumber = a/b
-}
-- Using let in

sumOfNumber1 :: Double -> Double -> Double
sumOfNumber1 a b = let mulNumber1 = a*b
                       divNumber1 = a/b
                    in (mulNumber1 + divNumber1)**2

